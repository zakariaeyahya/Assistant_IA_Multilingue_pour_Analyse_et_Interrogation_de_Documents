# File: streamlit/audio_processing_app.py

import streamlit as st
import os
import sys
import tempfile
from streamlit_option_menu import option_menu
import soundfile as sf
import numpy as np
from scipy.io import wavfile
import io
import requests

# Add the project root to sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(project_root)
import streamlit as st
import requests
import base64
import io
# Import necessary modules
from controllers.text_to_audio_controller import TextToAudioController
from controllers.audio_to_text_controller import AudioToTextController
from controllers.audio_to_audio_controller import AudioToAudioController
from controllers.text_to_text_controller import TextToTextController

# Define the Groq API key and FFmpeg path
GROQ_API_KEY = "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"
FFMPEG_PATH = "C:\\Users\\HP\\anaconda3\\pkgs\\ffmpeg-4.3.1-ha925a31_0\\Library\\bin\\ffmpeg.exe"
API_BASE_URL = "http://localhost:8000"  # Adjust this to your API's address
import streamlit as st
from streamlit_option_menu import option_menu
import requests
import base64
import os
import sys
import tempfile
import soundfile as sf
import numpy as np
from scipy.io import wavfile
import io

# Add the project root to sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(project_root)

# Configurations et constantes
API_BASE_URL = "http://localhost:8000"
SUPPORTED_LANGUAGES = ["fran√ßais", "anglais", "arabe", "darija"]

# Fonction pour le style CSS
def load_css():
    st.markdown("""
    <style>
    .big-font {
        font-size:30px !important;
        color: #1E90FF;
        font-weight: bold;
    }
    .stButton>button {
        color: #ffffff;
        background-color: #4CAF50;
        border-radius: 5px;
    }
    .output-box {
        background-color: #f0f0f0;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)

# Fonction utilitaire pour normaliser l'audio
def normalize_audio(audio_array):
    if audio_array.size == 0:
        st.warning("Le tableau audio est vide.")
        return np.array([], dtype=np.int16)

    if len(audio_array.shape) > 1 and audio_array.shape[0] > 1:
        audio_array = np.mean(audio_array, axis=0)
    
    max_abs_val = np.max(np.abs(audio_array))
    if max_abs_val == 0:
        st.warning("Le tableau audio ne contient que des z√©ros.")
        return np.zeros(audio_array.shape, dtype=np.int16)

    audio_array = audio_array / max_abs_val
    audio_array_int16 = (audio_array * 32767).astype(np.int16)
    
    return audio_array_int16

# Fonctions pour chaque page
def page_accueil():
    st.markdown('<p class="big-font">Bienvenue dans l\'Application de Traitement Audio & Texte</p>', unsafe_allow_html=True)
    st.write("Cette application vous permet de r√©aliser diverses op√©rations de traitement de texte et d'audio.")
    st.write("Utilisez le menu de navigation pour acc√©der aux diff√©rentes fonctionnalit√©s :")
    st.write("- **Text to Text** : Traduisez du texte et obtenez des r√©ponses bas√©es sur des documents PDF.")
    st.write("- **Text to Speech** : Convertissez du texte en audio dans diff√©rentes langues.")
    st.write("- **Speech to Text** : Transcrivez de l'audio en texte et obtenez des traductions.")
    st.write("- **√Ä Propos** : Informations sur l'application et son utilisation.")
    
    st.info("Pour commencer, s√©lectionnez une option dans le menu √† gauche.")

def page_text_to_text():
    st.markdown("### üìù Text to Text")
    question = st.text_input("Entrez votre question:")
    src_lang = st.selectbox("Langue de la question:", SUPPORTED_LANGUAGES)
    pdf_lang = st.selectbox("Langue des documents PDF:", SUPPORTED_LANGUAGES)
    target_lang = st.selectbox("Langue de la r√©ponse:", SUPPORTED_LANGUAGES)
    pdf_files = st.file_uploader("T√©l√©chargez un ou plusieurs fichiers PDF", type=["pdf"], accept_multiple_files=True)

    if st.button("üöÄ Traiter"):
        if question and pdf_files:
            with st.spinner('Traitement de la question en cours...'):
                files = [('pdf_files', (file.name, file.getvalue(), 'application/pdf')) for file in pdf_files]
                data = {
                    'question': question,
                    'src_lang': src_lang,
                    'pdf_lang': pdf_lang,
                    'target_lang': target_lang
                }
                response = requests.post(f"{API_BASE_URL}/process-text-to-text/", files=files, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ Question trait√©e avec succ√®s !")
                    
                    if src_lang != pdf_lang:
                        st.markdown(f"### üîÑ Question traduite en {pdf_lang} :")
                        st.markdown(f'<div class="output-box">{result["translated_question"]}</div>', unsafe_allow_html=True)
                    
                    st.markdown(f"### üí¨ R√©ponse en {target_lang} :")
                    st.markdown(f'<div class="output-box">{result["translated_response"]}</div>', unsafe_allow_html=True)
                else:
                    st.error(f"‚ùå Une erreur s'est produite lors du traitement : {response.text}")
        else:
            st.warning("‚ö†Ô∏è Veuillez entrer une question et t√©l√©charger au moins un fichier PDF.")
def page_text_to_speech():
    st.markdown("### üó£Ô∏è Text to Speech")
    
    text_input = st.text_area("Entrez le texte √† convertir en audio:", height=150)
    src_lang = st.selectbox("Langue du texte:", SUPPORTED_LANGUAGES)
    pdf_lang = st.selectbox("Langue des documents PDF:", SUPPORTED_LANGUAGES)  # Ajout de cette ligne
    target_lang = st.selectbox("Langue de l'audio:", SUPPORTED_LANGUAGES)
    pdf_files = st.file_uploader("T√©l√©chargez un ou plusieurs fichiers PDF de r√©f√©rence (optionnel)", type=["pdf"], accept_multiple_files=True)

    if st.button("üöÄ Convertir en Audio"):
        if text_input:
            with st.spinner('Conversion du texte en audio en cours...'):
                files = [('pdf_files', (file.name, file.getvalue(), 'application/pdf')) for file in pdf_files] if pdf_files else []
                data = {
                    'question': text_input,
                    'src_lang': src_lang,
                    'pdf_lang': pdf_lang,  # Modification de cette ligne
                    'target_lang': target_lang
                }
                
                try:
                    response = requests.post(f"{API_BASE_URL}/process-text-to-audio/", files=files, data=data)
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("‚úÖ Texte converti en audio avec succ√®s !")
                        
                        if 'translated_question' in result and src_lang != target_lang:
                            st.markdown(f"### üîÑ Texte traduit en {target_lang} :")
                            st.markdown(f'<div class="output-box">{result["translated_question"]}</div>', unsafe_allow_html=True)
                        
                        if 'translated_response' in result:
                            st.markdown(f"### üí¨ R√©ponse (si applicable) :")
                            st.markdown(f'<div class="output-box">{result["translated_response"]}</div>', unsafe_allow_html=True)
                        
                        if 'audio' in result:
                            st.markdown(f"### üîä Audio g√©n√©r√© :")
                            audio_bytes = base64.b64decode(result["audio"])
                            st.audio(audio_bytes, format="audio/wav")
                        else:
                            st.warning("Aucun audio n'a √©t√© g√©n√©r√©.")
                    else:
                        st.error(f"‚ùå Une erreur s'est produite lors de la conversion : {response.text}")
                except requests.exceptions.RequestException as e:
                    st.error(f"‚ùå Erreur de connexion √† l'API : {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Veuillez entrer du texte √† convertir en audio.")

    # Ajout d'informations suppl√©mentaires
    with st.expander("‚ÑπÔ∏è Comment utiliser cette fonctionnalit√©"):
        st.write("""
        1. Entrez le texte que vous souhaitez convertir en audio dans la zone de texte.
        2. S√©lectionnez la langue du texte d'entr√©e.
        3. S√©lectionnez la langue des documents PDF de r√©f√©rence .
        4. Choisissez la langue dans laquelle vous voulez que l'audio soit g√©n√©r√©.
        5. Si vous avez des documents PDF de r√©f√©rence, vous pouvez les t√©l√©charger (facultatif).
        6. Cliquez sur le bouton 'Convertir en Audio' pour lancer le processus.
        7. Une fois le traitement termin√©, vous pourrez √©couter l'audio g√©n√©r√© directement dans l'application.
        """)
# Modifiez les fonctions page_speech_to_text() et page_speech_to_speech() comme suit:

def page_speech_to_text():
    st.markdown("### üéôÔ∏è Speech to Text")
    
    audio_file = st.file_uploader("T√©l√©chargez un fichier audio (WAV, MP3, OPUS)", type=["wav", "mp3", "opus"])
    audio_lang = st.selectbox("Langue de l'audio:", SUPPORTED_LANGUAGES)
    pdf_lang = st.selectbox("Langue des documents PDF:", SUPPORTED_LANGUAGES)
    target_lang = st.selectbox("Langue de la transcription:", SUPPORTED_LANGUAGES)
    pdf_files = st.file_uploader("T√©l√©chargez un ou plusieurs fichiers PDF de r√©f√©rence (optionnel)", type=["pdf"], accept_multiple_files=True)

    if st.button("üöÄ Transcrire"):
        if audio_file:
            with st.spinner('Transcription de l\'audio en cours...'):
                # Afficher l'audio d'entr√©e
                st.markdown("### üéµ Audio d'entr√©e:")
                st.audio(audio_file, format=f"audio/{audio_file.type}")
                
                files = [('audio_file', (audio_file.name, audio_file.getvalue(), f'audio/{audio_file.type}'))]
                if pdf_files:
                    files.extend([('pdf_files', (file.name, file.getvalue(), 'application/pdf')) for file in pdf_files])
                
                data = {
                    'audio_lang': audio_lang,
                    'pdf_lang': pdf_lang,
                    'target_lang': target_lang
                }
                
                try:
                    response = requests.post(f"{API_BASE_URL}/process-audio-to-text/", files=files, data=data)
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("‚úÖ Audio transcrit avec succ√®s !")
                        
                        if 'transcription' in result:
                            st.markdown("### üìù Transcription originale :")
                            st.markdown(f'<div class="output-box">{result["transcription"]}</div>', unsafe_allow_html=True)
                        
                        if 'translated_transcription' in result and audio_lang != target_lang:
                            st.markdown(f"### üîÑ Transcription traduite en {target_lang} :")
                            st.markdown(f'<div class="output-box">{result["translated_transcription"]}</div>', unsafe_allow_html=True)
                        
                        if 'response_pdf_lang' in result:
                            st.markdown(f"### üí¨ R√©ponse bas√©e sur les PDF (si applicable) :")
                            st.markdown(f'<div class="output-box">{result["response_pdf_lang"]}</div>', unsafe_allow_html=True)
                        
                        if 'translated_response' in result and audio_lang != target_lang:
                            st.markdown(f"### üîÑ R√©ponse traduite en {target_lang} :")
                            st.markdown(f'<div class="output-box">{result["translated_response"]}</div>', unsafe_allow_html=True)
                        
                        # Ajout de l'audio de sortie correspondant √† la transcription
                        if 'output_audio' in result:
                            st.markdown(f"### üîä Audio de la transcription en {target_lang} :")
                            audio_bytes = base64.b64decode(result["output_audio"])
                            st.audio(audio_bytes, format="audio/wav")
                    else:
                        st.error(f"‚ùå Une erreur s'est produite lors de la transcription : {response.text}")
                except requests.exceptions.RequestException as e:
                    st.error(f"‚ùå Erreur de connexion √† l'API : {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Veuillez t√©l√©charger un fichier audio √† transcrire.")

    # Mise √† jour des informations d'utilisation
    with st.expander("‚ÑπÔ∏è Comment utiliser cette fonctionnalit√©"):
        st.write("""
        1. T√©l√©chargez un fichier audio (formats support√©s : WAV, MP3, OPUS).
        2. S√©lectionnez la langue de l'audio.
        3. S√©lectionnez la langue des documents PDF de r√©f√©rence (si applicable).
        4. Choisissez la langue dans laquelle vous voulez que la transcription soit faite.
        5. Si vous avez des documents PDF de r√©f√©rence, vous pouvez les t√©l√©charger (facultatif).
        6. Cliquez sur le bouton 'Transcrire' pour lancer le processus.
        7. Une fois le traitement termin√©, vous pourrez :
           - √âcouter l'audio d'entr√©e original
           - Voir la transcription originale et, si applicable, sa traduction
           - √âcouter l'audio g√©n√©r√© correspondant √† la transcription
           - Voir une r√©ponse bas√©e sur les PDF fournis, si applicable
        """)

def page_speech_to_speech():
    st.markdown("### üéôÔ∏èüîä Speech to Speech")
    
    audio_file = st.file_uploader("T√©l√©chargez un fichier audio (WAV, MP3, OPUS)", type=["wav", "mp3", "opus"])
    audio_lang = st.selectbox("Langue de l'audio d'entr√©e:", SUPPORTED_LANGUAGES)
    pdf_lang = st.selectbox("Langue des documents PDF:", SUPPORTED_LANGUAGES)
    target_lang = st.selectbox("Langue de l'audio de sortie:", SUPPORTED_LANGUAGES)
    pdf_files = st.file_uploader("T√©l√©chargez un ou plusieurs fichiers PDF de r√©f√©rence (optionnel)", type=["pdf"], accept_multiple_files=True)

    if st.button("üöÄ Traiter et Convertir"):
        if audio_file:
            with st.spinner('Traitement de l\'audio en cours...'):
                # Afficher l'audio d'entr√©e
                st.markdown("### üéµ Audio d'entr√©e:")
                st.audio(audio_file, format=f"audio/{audio_file.type}")
                
                files = [('audio_file', (audio_file.name, audio_file.getvalue(), f'audio/{audio_file.type}'))]
                if pdf_files:
                    files.extend([('pdf_files', (file.name, file.getvalue(), 'application/pdf')) for file in pdf_files])
                
                data = {
                    'audio_lang': audio_lang,
                    'pdf_lang': pdf_lang,
                    'target_lang': target_lang
                }
                
                try:
                    response = requests.post(f"{API_BASE_URL}/process-audio-to-audio/", files=files, data=data)
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("‚úÖ Audio trait√© et converti avec succ√®s !")
                        
                        if 'transcription' in result:
                            st.markdown("### üìù Transcription originale :")
                            st.markdown(f'<div class="output-box">{result["transcription"]}</div>', unsafe_allow_html=True)
                        
                        if 'translated_transcription' in result and audio_lang != target_lang:
                            st.markdown(f"### üîÑ Transcription traduite en {target_lang} :")
                            st.markdown(f'<div class="output-box">{result["translated_transcription"]}</div>', unsafe_allow_html=True)
                        
                        if 'response_pdf_lang' in result:
                            st.markdown(f"### üí¨ R√©ponse bas√©e sur les PDF (si applicable) :")
                            st.markdown(f'<div class="output-box">{result["response_pdf_lang"]}</div>', unsafe_allow_html=True)
                        
                        if 'translated_response' in result and audio_lang != target_lang:
                            st.markdown(f"### üîÑ R√©ponse traduite en {target_lang} :")
                            st.markdown(f'<div class="output-box">{result["translated_response"]}</div>', unsafe_allow_html=True)
                        
                        if 'response_audio' in result:
                            st.markdown(f"### üîä Audio g√©n√©r√© en {target_lang} :")
                            audio_bytes = base64.b64decode(result["response_audio"])
                            st.audio(audio_bytes, format="audio/wav")
                        else:
                            st.warning("Aucun audio de r√©ponse n'a √©t√© g√©n√©r√©.")
                    else:
                        st.error(f"‚ùå Une erreur s'est produite lors du traitement : {response.text}")
                except requests.exceptions.RequestException as e:
                    st.error(f"‚ùå Erreur de connexion √† l'API : {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Veuillez t√©l√©charger un fichier audio √† traiter.")

    # Mise √† jour des informations d'utilisation
    with st.expander("‚ÑπÔ∏è Comment utiliser cette fonctionnalit√©"):
        st.write("""
        1. T√©l√©chargez un fichier audio (formats support√©s : WAV, MP3, OPUS).
        2. S√©lectionnez la langue de l'audio d'entr√©e.
        3. S√©lectionnez la langue des documents PDF de r√©f√©rence (si applicable).
        4. Choisissez la langue dans laquelle vous voulez que l'audio de sortie soit g√©n√©r√©.
        5. Si vous avez des documents PDF de r√©f√©rence, vous pouvez les t√©l√©charger (facultatif).
        6. Cliquez sur le bouton 'Traiter et Convertir' pour lancer le processus.
        7. Une fois le traitement termin√©, vous pourrez :
           - √âcouter l'audio d'entr√©e original
           - Voir la transcription originale et sa traduction
           - √âcouter l'audio g√©n√©r√© dans la langue cible
           - Voir une r√©ponse bas√©e sur les PDF fournis, si applicable
        """)
def page_a_propos():
    st.markdown("### üìö √Ä Propos de l'Application")
    
    st.write("""
    Bienvenue dans notre Application de Traitement Audio & Texte !
    
    Cette application a √©t√© d√©velopp√©e pour faciliter le traitement et la traduction de texte et d'audio, en s'appuyant sur des documents PDF comme source de contexte. Voici un aper√ßu de ses principales fonctionnalit√©s :
    """)

    st.markdown("""
    #### üîß Fonctionnalit√©s principales :
    
    1. **Text to Text** : 
       - Traduisez du texte d'une langue √† une autre.
       - Obtenez des r√©ponses √† vos questions bas√©es sur le contenu de documents PDF.

    2. **Text to Speech** : 
       - Convertissez du texte √©crit en audio dans diff√©rentes langues.
       - Utilisez optionnellement des PDF pour enrichir le contenu audio g√©n√©r√©.

    3. **Speech to Text** : 
       - Transcrivez des fichiers audio en texte.
       - Traduisez la transcription dans une autre langue si n√©cessaire.
       - Obtenez des informations suppl√©mentaires bas√©es sur des PDF de r√©f√©rence.

    #### üåç Langues support√©es :
    - Fran√ßais
    - Anglais
    - Arabe
    - Darija (Arabe marocain)

    #### üõ†Ô∏è Technologies utilis√©es :
    - Backend : FastAPI, Python
    - Frontend : Streamlit
    - Mod√®les de langage : Seamless M4T pour la traduction et le traitement audio
    - Base de connaissances : Groq pour l'analyse des PDF et la g√©n√©ration de r√©ponses
    """)

    st.info("""
    ‚ÑπÔ∏è **Note importante** : Cette application est con√ßue pour traiter des informations g√©n√©rales. 
    Veuillez ne pas utiliser de donn√©es sensibles ou confidentielles.
    """)

    st.markdown("""
    #### üìû Support et Contact
    
    Si vous rencontrez des probl√®mes ou si vous avez des suggestions d'am√©lioration, 
    n'h√©sitez pas √† contacter notre √©quipe de support √† l'adresse : support@example.com

    #### üîÑ Mises √† jour
    
    Nous travaillons constamment √† l'am√©lioration de cette application. 
    Consultez r√©guli√®rement cette page pour √™tre inform√© des derni√®res mises √† jour et nouvelles fonctionnalit√©s.

    #### üìú Licence

    Cette application est distribu√©e sous licence MIT. Pour plus de d√©tails, veuillez consulter le fichier LICENSE inclus dans le d√©p√¥t du projet.
    """)

    # Vous pouvez ajouter ici un lien vers les conditions d'utilisation ou la politique de confidentialit√© si n√©cessaire
    st.markdown("[Conditions d'utilisation](#) | [Politique de confidentialit√©](#)")
def main():
    load_css()

    # Navigation
    with st.sidebar:
        choice = option_menu("Menu Principal", ["Accueil", "Text to Text", "Text to Speech", "Speech to Text", "Speech to Speech", "√Ä Propos"],
                             icons=['house', 'chat-dots', 'megaphone', 'mic', 'headset', 'info-circle'],
                             menu_icon="app-indicator", default_index=0,
                             styles={
                                 "container": {"padding": "5!important", "background-color": "#fafafa"},
                                 "icon": {"color": "orange", "font-size": "25px"},
                                 "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#eee"},
                                 "nav-link-selected": {"background-color": "#02ab21"},
                             })

    # Affichage de la page correspondante
    if choice == "Accueil":
        page_accueil()
    elif choice == "Text to Text":
        page_text_to_text()
    elif choice == "Text to Speech":
        page_text_to_speech()
    elif choice == "Speech to Text":
        page_speech_to_text()
    elif choice == "Speech to Speech":
        page_speech_to_speech()
    elif choice == "√Ä Propos":
        page_a_propos()

if __name__ == "__main__":
    main()
